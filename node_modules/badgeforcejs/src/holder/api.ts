import {Contract, ContractConfig} from '../contract';
import {HolderInfo, Credential} from './obj_helpers';

export class Holder {
    /**
     * @param holder instance from truffle-contract
     */
    constructor(public holder: any) {}

    /**
     * Gets the public information for this holder contract
     * @return information object
     */
    async getHolderInfo() {
        try {
            return new HolderInfo(await this.holder.holder.call());
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets the number of (accepted) credentials
     * @return number of credentials
     */
    async getNumberOfCredentials() {
        try {
            return await this.holder.getNumberOfCredentials();
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets the number of pending credentials. These are credentials the Holder has not accepted or rejected yet
     * @return number of pending credentials
     */
    async getNumberOfPendingCredentials() {
        try {
            return await this.holder.getNumberOfPendingCredentials();
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Recompute the proof of integrity hash for a credential
     * @param  txnKey transaction key of the credential
     * @return        integrity hash
     */
    async recomputePOIHash(txnKey) {
        try {
            return await this.holder.recomputePOIHash(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets a single credential by transaction key
     * @param  txnKey transaction key of the credential
     * @return        credential object
     */
    async getCredential(txnKey) {
        try {
            return new Credential(...(await this.holder.getCredential(txnKey)));
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets a transaction key based on the index it is stored at. (Helper method for fetching all credentials)
     * @param  index
     * @return       the transaction key
     */
    async getTxnKey(index) {
        try {
            return await this.holder.getTxnKey(index);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Get all the credentials on the contract no matter the state
     * @return array of credential objects
     */
    async getCredentials() {
        try {
            let credentials: Credential[] = [];
            const count = await this.getNumberOfCredentials();
            for (let i = 0; i < count; i++) {
                const key = await this.getTxnKey(i);
                credentials.push(await this.getCredential(key));
            }
            return credentials;
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Delete a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    async deleteCredential(txnKey) {
        try {
            return await this.holder.deleteCredential(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Add a trusted issuer to contract. Issuer contracts must be set as trusted before they can attempt to issue a holder a credential
     * @param  issuer address of the issuer contract
     */
    async addTrustedIssuer(issuer) {
        try {
            return await this.holder.addTrustedIssuer(issuer);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Removes a trusted issuer. If an issuer is removed they will no longer be able to issue this holder credentials
     * @param  issuer address of the issuer contract
     */
    async removeTrustedIssuer(issuer) {
        try {
            return await this.holder.removeTrustedIssuer(issuer);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Checks if an issuer contract is set as trusted
     * @param  issuer address of the issuer contract
     * @return        true/false
     */
    async isTrusted(issuer) {
        try {
            return await this.holder.trustedIssuers.call(issuer);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Accepts a pending credential
     * @param  txnKey transaction key of the credential
     */
    async acceptCredential(txnKey) {
        try {
            return await this.holder.acceptCredential(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Rejects a pending credential. When a credential is rejected it is removed from the contract all together.
     * @param  txnKey transaction key of the credential
     */
    async rejectCredential(txnKey) {
        try {
            return await this.holder.rejectCredential(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }
}

export class HolderClient extends Contract {
    /**
     * @param config a configuration object
     */
    constructor(config: ContractConfig) {
        super(config);
    }
    /**
     * Gets a [[Holder]] object instanstiated with contract data at the given address
     * @param  address address of the contract
     * @return         a holder object
     */
    async getInstance(address: number) {
        try {
            const instance = await this.contractABI.at(address);
            return new Holder(instance);
        } catch (error) {
            return error;
        }
	}
}
