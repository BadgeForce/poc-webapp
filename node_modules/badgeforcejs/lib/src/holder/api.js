"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var contract_1 = require("../contract");
var obj_helpers_1 = require("./obj_helpers");
var Holder = /** @class */ (function () {
    /**
     * @param holder instance from truffle-contract
     */
    function Holder(holder) {
        this.holder = holder;
    }
    /**
     * Gets the public information for this holder contract
     * @return information object
     */
    Holder.prototype.getHolderInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = obj_helpers_1.HolderInfo.bind;
                        return [4 /*yield*/, this.holder.holder.call()];
                    case 1: return [2 /*return*/, new (_a.apply(obj_helpers_1.HolderInfo, [void 0, _b.sent()]))()];
                    case 2:
                        error_1 = _b.sent();
                        throw new Error(error_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the number of (accepted) credentials
     * @return number of credentials
     */
    Holder.prototype.getNumberOfCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.getNumberOfCredentials()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_2 = _a.sent();
                        throw new Error(error_2);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the number of pending credentials. These are credentials the Holder has not accepted or rejected yet
     * @return number of pending credentials
     */
    Holder.prototype.getNumberOfPendingCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.getNumberOfPendingCredentials()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_3 = _a.sent();
                        throw new Error(error_3);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Recompute the proof of integrity hash for a credential
     * @param  txnKey transaction key of the credential
     * @return        integrity hash
     */
    Holder.prototype.recomputePOIHash = function (txnKey) {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.recomputePOIHash(txnKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_4 = _a.sent();
                        throw new Error(error_4);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets a single credential by transaction key
     * @param  txnKey transaction key of the credential
     * @return        credential object
     */
    Holder.prototype.getCredential = function (txnKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, error_5;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _f.trys.push([0, 2, , 3]);
                        _b = (_a = obj_helpers_1.Credential.bind).apply;
                        _c = [obj_helpers_1.Credential];
                        _e = (_d = [void 0]).concat;
                        return [4 /*yield*/, this.holder.getCredential(txnKey)];
                    case 1: return [2 /*return*/, new (_b.apply(_a, _c.concat([_e.apply(_d, [(_f.sent())])])))()];
                    case 2:
                        error_5 = _f.sent();
                        throw new Error(error_5);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets a transaction key based on the index it is stored at. (Helper method for fetching all credentials)
     * @param  index
     * @return       the transaction key
     */
    Holder.prototype.getTxnKey = function (index) {
        return __awaiter(this, void 0, void 0, function () {
            var error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.getTxnKey(index)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_6 = _a.sent();
                        throw new Error(error_6);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get all the credentials on the contract no matter the state
     * @return array of credential objects
     */
    Holder.prototype.getCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, count, i, key, _a, _b, error_7;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 7, , 8]);
                        credentials = [];
                        return [4 /*yield*/, this.getNumberOfCredentials()];
                    case 1:
                        count = _c.sent();
                        i = 0;
                        _c.label = 2;
                    case 2:
                        if (!(i < count)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getTxnKey(i)];
                    case 3:
                        key = _c.sent();
                        _b = (_a = credentials).push;
                        return [4 /*yield*/, this.getCredential(key)];
                    case 4:
                        _b.apply(_a, [_c.sent()]);
                        _c.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 2];
                    case 6: return [2 /*return*/, credentials];
                    case 7:
                        error_7 = _c.sent();
                        throw new Error(error_7);
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    Holder.prototype.deleteCredential = function (txnKey) {
        return __awaiter(this, void 0, void 0, function () {
            var error_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.deleteCredential(txnKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_8 = _a.sent();
                        throw new Error(error_8);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Add a trusted issuer to contract. Issuer contracts must be set as trusted before they can attempt to issue a holder a credential
     * @param  issuer address of the issuer contract
     */
    Holder.prototype.addTrustedIssuer = function (issuer) {
        return __awaiter(this, void 0, void 0, function () {
            var error_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.addTrustedIssuer(issuer)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_9 = _a.sent();
                        throw new Error(error_9);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Removes a trusted issuer. If an issuer is removed they will no longer be able to issue this holder credentials
     * @param  issuer address of the issuer contract
     */
    Holder.prototype.removeTrustedIssuer = function (issuer) {
        return __awaiter(this, void 0, void 0, function () {
            var error_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.removeTrustedIssuer(issuer)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_10 = _a.sent();
                        throw new Error(error_10);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if an issuer contract is set as trusted
     * @param  issuer address of the issuer contract
     * @return        true/false
     */
    Holder.prototype.isTrusted = function (issuer) {
        return __awaiter(this, void 0, void 0, function () {
            var error_11;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.trustedIssuers.call(issuer)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_11 = _a.sent();
                        throw new Error(error_11);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Accepts a pending credential
     * @param  txnKey transaction key of the credential
     */
    Holder.prototype.acceptCredential = function (txnKey) {
        return __awaiter(this, void 0, void 0, function () {
            var error_12;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.acceptCredential(txnKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_12 = _a.sent();
                        throw new Error(error_12);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Rejects a pending credential. When a credential is rejected it is removed from the contract all together.
     * @param  txnKey transaction key of the credential
     */
    Holder.prototype.rejectCredential = function (txnKey) {
        return __awaiter(this, void 0, void 0, function () {
            var error_13;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.holder.rejectCredential(txnKey)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_13 = _a.sent();
                        throw new Error(error_13);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Holder;
}());
exports.Holder = Holder;
var HolderClient = /** @class */ (function (_super) {
    __extends(HolderClient, _super);
    /**
     * @param config a configuration object
     */
    function HolderClient(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Gets a [[Holder]] object instanstiated with contract data at the given address
     * @param  address address of the contract
     * @return         a holder object
     */
    HolderClient.prototype.getInstance = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var instance, error_14;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.contractABI.at(address)];
                    case 1:
                        instance = _a.sent();
                        return [2 /*return*/, new Holder(instance)];
                    case 2:
                        error_14 = _a.sent();
                        return [2 /*return*/, error_14];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return HolderClient;
}(contract_1.Contract));
exports.HolderClient = HolderClient;
//# sourceMappingURL=api.js.map