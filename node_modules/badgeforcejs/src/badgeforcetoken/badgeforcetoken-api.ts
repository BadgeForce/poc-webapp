import {Contract, ContractConfig} from '../contract';
import * as contract from 'truffle-contract';

/**
 * @param web3Provider  web3 provider object
 * @param artifacts  JSON ABI of BadgeForceToken
 * @return address of BadgeForceToken contract
 */
export const getTokenAddress = (web3Provider, artifacts) => {
    const Token = contract(artifacts);
    Token.setProvider(web3Provider);
    return Token.deployed()
    .then((instance) => {
        return instance.address;
    });
};

export class BadgeForceToken {
    /**
     * @param token contract instance from truffle-contract
     */
    constructor(public token: any) {}
    /**
     * Returns balance of BadgeForceTokens for a wallet address
     * @param  owner wallet address
     * @return balance
     */
    async getBalanceOf(owner) {
        try {
            return await this.token.balanceOf(owner);
        } catch (error) {
            throw new Error(error);
        }
    }
}

export class BadgeForceTokenClient extends Contract {
    /**
     * @param config a [[ContractConfig]]
     */
    constructor(config: ContractConfig) {
        super(config);
    }
    /**
     * Takes the address of a BadgeForceToken contract and returns a usable instance [[BadgeForceToken]]
     * @param  address [description]
     * @return         [[BadgeForceToken]]
     */
    async getInstance(address: number) {
        try {
            const instance = await this.contractABI.at(address);
            return new BadgeForceToken(instance);
        } catch (error) {
            return error;
        }
	}
}
