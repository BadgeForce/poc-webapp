"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var holder_1 = require("../../holder");
var issuer_1 = require("../../issuer");
var contract_1 = require("../../contract");
var test_utils_1 = require("../../../test-utils");
var issuerFactory = require("factories").issuerFactory;
var holderFactory = require("factories").holderFactory;
var holderArtifacts = require("badgeforce").holder;
var issuerArtifacts = require("badgeforce").issuer;
describe("Holder Factory api", function () {
    var holderF;
    var issuerF;
    var accounts;
    var testContractInstances;
    var issuerParams;
    var holderClient;
    var issuerClient;
    var newIssuerParams;
    var tokenArtifacts = require("BadgeForceToken").badgeforcetoken;
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            accounts = test_utils_1.getTestAccounts();
            return [2 /*return*/];
        });
    }); });
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var holderConfig, issuerConfig, holderFactoryConfig, issuerFactoryConfig, holderFactoryClient, issuerFactoryClient;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    issuerParams = { adminWalletAddr: accounts[0], name: "BadgeForce", url: "https://github.com/BadgeForce" };
                    return [4 /*yield*/, test_utils_1.getTestInstances(issuerParams)];
                case 1:
                    testContractInstances = _a.sent();
                    holderConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, holderArtifacts, 0, 7500000);
                    issuerConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, issuerArtifacts, 0, 4966224);
                    holderClient = new holder_1.HolderClient(holderConfig);
                    issuerClient = new issuer_1.IssuerClient(issuerConfig);
                    holderFactoryConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, holderFactory, 0, 7500000);
                    issuerFactoryConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, issuerFactory, 0, 7500000);
                    holderFactoryClient = new index_1.HolderFactoryClient(holderFactoryConfig, holderClient);
                    issuerFactoryClient = new index_1.IssuerFactoryClient(issuerFactoryConfig, testContractInstances.token.address, issuerClient);
                    return [4 /*yield*/, holderFactoryClient.getInstance(testContractInstances.holderF.address)];
                case 2:
                    holderF = _a.sent();
                    return [4 /*yield*/, issuerFactoryClient.getInstance(testContractInstances.issuerF.address)];
                case 3:
                    issuerF = _a.sent();
                    newIssuerParams = {
                        admin: accounts[0],
                        name: "BadgeForce",
                        url: "https://github.com/BadgeForce"
                    };
                    return [2 /*return*/];
            }
        });
    }); });
    it("should create new holder contract", function () { return __awaiter(_this, void 0, void 0, function () {
        var holder, info;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, holderF.newHolder(accounts[0])];
                case 1:
                    holder = _a.sent();
                    return [4 /*yield*/, holder.getHolderInfo()];
                case 2:
                    info = _a.sent();
                    expect(info.address).toBe(accounts[0]);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should create new issuer contract", function () { return __awaiter(_this, void 0, void 0, function () {
        var issuer, info;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, issuerF.newIssuer(issuerParams.adminWalletAddr, issuerParams.name, issuerParams.url)];
                case 1:
                    issuer = _a.sent();
                    return [4 /*yield*/, issuer.getIssuerInfo()];
                case 2:
                    info = _a.sent();
                    expect(info.issuer).toBe(newIssuerParams.admin);
                    expect(info.name).toBe(newIssuerParams.name);
                    expect(info.url).toBe(newIssuerParams.url);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=api.factories.spec.js.map