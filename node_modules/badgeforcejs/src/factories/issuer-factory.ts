import {Contract, ContractConfig} from '../contract';
import {IssuerClient, Issuer} from '../issuer';

/**
 * Parses response from EVM for new contract creation
 * @param holderAddrRes      response from EVM
 * @return the address of the new contract
 */
export const parseIssuerrAddrRes = (issuerAddrRes) => {
  return issuerAddrRes.logs[0].args._location;
};

export class IssuerFactory {
    /**
     * @param factory            instance from truffle-contract
     * @param badeForceTokenAddr address of BadgeForceToken contract
     * @param issuerClient       instanstiated [[IssuerClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(public factory: any, public badeForceTokenAddr: number, public issuerClient: IssuerClient) {}
    /**
     * Creates a new Issuer contract
     * @param  admin the god account for this contract, has permission to do everything
     * @param  name  name of the real world Issuer
     * @param  url   url to page or site of real world issuer
     * @return       an instanstiated [[Issuer]] object
     */
    async newIssuer(admin, name, url) {
        try {
            const newIssuerAddr = await this.factory.createIssuerContract(admin, name, url, this.badeForceTokenAddr);
            const address = parseIssuerrAddrRes(newIssuerAddr);
            return this.issuerClient.getInstance(address);
        } catch (error) {
            throw new Error(error);
        }
    }
}

export class IssuerFactoryClient extends Contract {
    /**
     * @param config             a configuration object [[ContractConfig]]
     * @param badeForceTokenAddr address of BadgeForceToken contract
     * @param issuerClient       instanstiated [[IssuerClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(config: ContractConfig, public badeForceTokenAddr: number, public issuerClient: IssuerClient) {
        super(config);
    }
    /**
     * @param  address address of the contract
     * @return         an instanstiated [[IssuerFactory]] object
     */
    async getInstance(address: number) {
        try {
            const instance = await this.contractABI.at(address);
            return new IssuerFactory(instance, this.badeForceTokenAddr, this.issuerClient);
        } catch (error) {
             throw new Error(error);
        }
	}
}
