import { Contract, ContractConfig } from '../contract';
import { HolderClient } from '../holder';
/**
 * Parses response from EVM for new contract creation
 * @param holderAddrRes      response from EVM
 * @return the address of the new contract
 */
export declare const parseHolderAddrRes: (holderAddrRes: any) => any;
export declare class HolderFactory {
    factory: any;
    holderClient: HolderClient;
    /**
     * @param factory      instance from truffle-contract
     * @param holderClient instanstiated [[HolderClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(factory: any, holderClient: HolderClient);
    /**
     * Creates a new holder contract
     * @param  owner wallet address of the real world recipient
     * @return       an instanstiated [[Holder]] object
     */
    newHolder(owner: any): Promise<any>;
}
export declare class HolderFactoryClient extends Contract {
    holderClient: HolderClient;
    /**
     * @param config       a configuration object [[ContractConfig]]
     * @param holderClient instanstiated [[HolderClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(config: ContractConfig, holderClient: HolderClient);
    /**
     * @param  address address of the contract
     * @return         an instanstiated [[HolderFactory]] object
     */
    getInstance(address: number): Promise<any>;
}
