import { Contract, ContractConfig } from '../contract';
import { HolderInfo, Credential } from './obj_helpers';
export declare class Holder {
    holder: any;
    /**
     * @param holder instance from truffle-contract
     */
    constructor(holder: any);
    /**
     * Gets the public information for this holder contract
     * @return information object
     */
    getHolderInfo(): Promise<HolderInfo>;
    /**
     * Gets the number of (accepted) credentials
     * @return number of credentials
     */
    getNumberOfCredentials(): Promise<any>;
    /**
     * Gets the number of pending credentials. These are credentials the Holder has not accepted or rejected yet
     * @return number of pending credentials
     */
    getNumberOfPendingCredentials(): Promise<any>;
    /**
     * Recompute the proof of integrity hash for a credential
     * @param  txnKey transaction key of the credential
     * @return        integrity hash
     */
    recomputePOIHash(txnKey: any): Promise<any>;
    /**
     * Gets a single credential by transaction key
     * @param  txnKey transaction key of the credential
     * @return        credential object
     */
    getCredential(txnKey: any): Promise<Credential>;
    /**
     * Gets a transaction key based on the index it is stored at. (Helper method for fetching all credentials)
     * @param  index
     * @return       the transaction key
     */
    getTxnKey(index: any): Promise<any>;
    /**
     * Get all the credentials on the contract no matter the state
     * @return array of credential objects
     */
    getCredentials(): Promise<Credential[]>;
    /**
     * Delete a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    deleteCredential(txnKey: any): Promise<any>;
    /**
     * Add a trusted issuer to contract. Issuer contracts must be set as trusted before they can attempt to issue a holder a credential
     * @param  issuer address of the issuer contract
     */
    addTrustedIssuer(issuer: any): Promise<any>;
    /**
     * Removes a trusted issuer. If an issuer is removed they will no longer be able to issue this holder credentials
     * @param  issuer address of the issuer contract
     */
    removeTrustedIssuer(issuer: any): Promise<any>;
    /**
     * Checks if an issuer contract is set as trusted
     * @param  issuer address of the issuer contract
     * @return        true/false
     */
    isTrusted(issuer: any): Promise<any>;
    /**
     * Accepts a pending credential
     * @param  txnKey transaction key of the credential
     */
    acceptCredential(txnKey: any): Promise<any>;
    /**
     * Rejects a pending credential. When a credential is rejected it is removed from the contract all together.
     * @param  txnKey transaction key of the credential
     */
    rejectCredential(txnKey: any): Promise<any>;
}
export declare class HolderClient extends Contract {
    /**
     * @param config a configuration object
     */
    constructor(config: ContractConfig);
    /**
     * Gets a [[Holder]] object instanstiated with contract data at the given address
     * @param  address address of the contract
     * @return         a holder object
     */
    getInstance(address: number): Promise<any>;
}
