import * as Wallet from 'ethereumjs-wallet';
import * as importers from 'ethereumjs-wallet/thirdparty';
import * as ethUtil from 'ethereumjs-util';
import * as obj_helpers from './obj_helpers';

/**
 * @param wallet  wallet object created with 'ethereumjs-wallet'
 * @return private key hex
 */
export const walletToPrivateKey = (wallet) => {
    const privateKeyBuffer = wallet.getPrivateKey();
    return ethUtil.bufferToHex(privateKeyBuffer);
};

export class AccountImporter {
  /**
   * @param privateKey  private key hex for an account
   * @return promise that resolves to an [[Account]] object
   */
  async importAccountRaw(privateKey) {
    try {
      const privateKeyHex = ethUtil.stripHexPrefix(privateKey);
      const address = ethUtil.privateToAddress(ethUtil.toBuffer(ethUtil.addHexPrefix(privateKeyHex)));
      return new obj_helpers.Account(privateKeyHex, ethUtil.bufferToHex(address));
    } catch (e) {
      console.log(e);
      throw new Error('Unable to import account');
    }
  }
  /**
   * @param input  EtherWallet JSON
   * @param password  password for the account
   * @return promise that resolves to an [[Account]] object
   */
  async importAccountJSON(input, password) {
    try {
      let wallet;
      try {
        wallet = importers.fromEtherWallet(input, password);
      } catch (e) {
        console.log('Attempt to import as EtherWallet format failed, trying V3...');
      }
      if (!wallet) {
        wallet = Wallet.fromV3(input, password, true);
      }
      const privateKeyHex = walletToPrivateKey(wallet);
      const address = ethUtil.privateToAddress(privateKeyHex);
      return new obj_helpers.Account(privateKeyHex, ethUtil.bufferToHex(address));
    } catch (e) {
      console.log(e);
      throw new Error('Unable to import account');
    }
  }
}
