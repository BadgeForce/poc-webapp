import { Contract, ContractConfig } from '../contract';
import { IssuerClient, Issuer } from '../issuer';
/**
 * Parses response from EVM for new contract creation
 * @param holderAddrRes      response from EVM
 * @return the address of the new contract
 */
export declare const parseIssuerrAddrRes: (issuerAddrRes: any) => any;
export declare class IssuerFactory {
    factory: any;
    badeForceTokenAddr: number;
    issuerClient: IssuerClient;
    /**
     * @param factory            instance from truffle-contract
     * @param badeForceTokenAddr address of BadgeForceToken contract
     * @param issuerClient       instanstiated [[IssuerClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(factory: any, badeForceTokenAddr: number, issuerClient: IssuerClient);
    /**
     * Creates a new Issuer contract
     * @param  admin the god account for this contract, has permission to do everything
     * @param  name  name of the real world Issuer
     * @param  url   url to page or site of real world issuer
     * @return       an instanstiated [[Issuer]] object
     */
    newIssuer(admin: any, name: any, url: any): Promise<Issuer>;
}
export declare class IssuerFactoryClient extends Contract {
    badeForceTokenAddr: number;
    issuerClient: IssuerClient;
    /**
     * @param config             a configuration object [[ContractConfig]]
     * @param badeForceTokenAddr address of BadgeForceToken contract
     * @param issuerClient       instanstiated [[IssuerClient]] object. This is used so that we can get a nice usable instance of the new contract right away
     */
    constructor(config: ContractConfig, badeForceTokenAddr: number, issuerClient: IssuerClient);
    /**
     * @param  address address of the contract
     * @return         an instanstiated [[IssuerFactory]] object
     */
    getInstance(address: number): Promise<IssuerFactory>;
}
