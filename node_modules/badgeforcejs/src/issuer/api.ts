import {Contract, ContractConfig} from '../contract';
import {IssuerInfo, IssuerBadge, Credential, VerifyResponse} from './obj_helpers';

export class Issuer {
    /**
     * @param issuer instance from truffle-contract
     */
    constructor(public issuer: any) {}

    /**
     * Gets the public information for this issuer contract
     * @return info object
     */
    async getIssuerInfo() {
        return new IssuerInfo(...(await this.issuer.getInfo()));
    }

    /**
     * Gets a badge by index (index of the badge name on the contract)
     * @param  i [description]
     * @return   badge object
     */
    async getBadge(i) {
        try {
            const name = await this.issuer.getNameByIndex(i);
            return new IssuerBadge(...(await this.issuer.getBadge(name)));
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets all the badges
     * @return array of badges
     */
    async getBadges() {
        try {
            let badges: IssuerBadge[] = [];
            const count = await this.issuer.getNumberOfBadges();
            for (let i = 0; i < count.toString(); i++) {
                badges.push(await this.getBadge(i));
            }
            return badges;
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Creates a new badge for issuance
     * @param  badge badge object
     */
    async createBadge(badge: IssuerBadge) {
        try {
            return await this.issuer.createBadge(...Object.values(badge));
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Deletes a badge by name
     * @param  name name of the badge to be deleted
     */
    async deleteBadge(name: string) {
        try {
            return await this.issuer.deleteBadge(name);
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Issues a credential
     * @param  credential credential object
     */
    async issueCredential(credential: Credential) {
        try {
            return await this.issuer.issue(...Object.values(credential));
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Gets current number of badges on the contract
     * @return number of badges
     */
    async getNumberOfBadges() {
        try {
            return await this.issuer.getNumberOfBadges();
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Authorizes a new ethereum wallet address. This will allow an address to do things.
     * @param  newIssuer wallet address
     */
    async authorzeAccount(newIssuer) {
        try {
            return await this.issuer.authorzeAccount(newIssuer);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Removes an authorized address. Once this is done, the removed address will no longer be able to interact with the contract
     * @param  issuer wallet address
     */
    async removeAuthorizedAccount(issuer) {
        try {
            return await this.issuer.removeAuthorizedAccount(issuer);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets an authorized account (wallet address) by index
     * @param  index wallet address
     * @return       address of the authorized account
     */
    async getAuthorizedAccount(index) {
        try {
            return await this.issuer.getAuthorizedAccount(index);
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Gets the current number of authorized accounts on the contract
     * @return number of authorized accounts
     */
    async getNumberOfAuthorizedAccounts() {
        try {
            return await this.issuer.getNumberOfAuthorizedAccounts();
        } catch (error) {
            throw new Error(error);
        }
    }

    /**
     * Revoke a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    async revoke(txnKey) {
        try {
            return await this.issuer.revoke(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Un-Revoke a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    async unRevoke(txnKey) {
        try {
            return await this.issuer.unRevoke(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Checks if a credential is revoked by transaction key
     * @param  txnKey transaction key of the credential
     * @return true/false
     */
    async isRevoked(txnKey) {
        try {
            return await this.issuer.isRevoked(txnKey);
        } catch (error) {
            throw new Error(error);
        }
    }
    /**
     * Verifies a credential
     * @param  txnKey    transaction key of the credential
     * @param  recipient recipient of the credential (holder contract address)
     * @return           verification response
     */
    async verifyCredential(txnKey, recipient) {
        try {
            return new VerifyResponse(...await this.issuer.verifyCredential(txnKey, recipient));
        } catch (error) {
            throw new Error(error);
        }
    }
}

export class IssuerClient extends Contract {
  /**
   * @param config a configuration object
   */
    constructor(config: ContractConfig) {
        super(config);
    }
    /**
     * Gets a [[Issuer]] object instanstiated with contract data at the given address
     * @param  address address of the contract
     * @return         a issuer object
     */
    async getInstance(address: number) {
        try {
            const instance = await this.contractABI.at(address);
            return new Issuer(instance);
        } catch (error) {
            throw new Error(error);
        }
	}
}
