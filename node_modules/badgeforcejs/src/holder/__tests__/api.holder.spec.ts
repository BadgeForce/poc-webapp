import {HolderClient, Holder} from "../index";
import {IssuerClient, Issuer} from "../../issuer";
import * as objHelpers from "../obj_helpers";
import * as issuerObjHelpers from "../../issuer/obj_helpers";
import {ContractConfig} from "../../contract";
import {getTestAccounts, getTestInstances, web3, ganacheHost} from "../../../test-utils";
const holderArtifacts = require("badgeforce").holder;
const issuerArtifacts = require("badgeforce").issuer;

describe("Holder api", () => {
  let holder: Holder;
  let issuer: Issuer;
  let accounts;
  let issuerParams;
  let testContractInstances;
  let issueTestCred;
  let badge: issuerObjHelpers.IssuerBadge;
  beforeAll(async () => {
      accounts = getTestAccounts();
  });
beforeEach(async () => {
      issuerParams = {adminWalletAddr: accounts[0], name: "BadgeForce", url: "https://github.com/BadgeForce"};
      testContractInstances = await getTestInstances(issuerParams);

      const holderConfig = new ContractConfig(ganacheHost, holderArtifacts, 0, 9000000);
      const issuerConfig = new ContractConfig(ganacheHost, issuerArtifacts, 0, 9000000);
      const holderClient = new HolderClient(holderConfig);
      const issuerClient = new IssuerClient(issuerConfig);

      holder = await holderClient.getInstance(testContractInstances.holder.address);
      issuer = await issuerClient.getInstance(testContractInstances.issuer.address);
      badge = new issuerObjHelpers.IssuerBadge();
      badge.description = "Cool badge";
      badge.name = "Nice";
      badge.image = "image";
      badge.version = "1";
      issueTestCred = async () => {

        try {
          await issuer.createBadge(badge);
          await holder.addTrustedIssuer(issuer.issuer.address);
          const credential = new issuerObjHelpers.Credential(badge.name, holder.holder.address, 0);
          await issuer.issueCredential(credential);
          return (holder.getCredential(await holder.getTxnKey(0)));
        } catch(error){
          throw new Error(error);
        }
      }
})
	it("should get holder info", async () => {
        const info = await holder.getHolderInfo();
        expect(info).toEqual(new objHelpers.HolderInfo(accounts[0]));
    });
    it("should getNumberOfCredentials and  getNumberOfPendingCredentials", async () => {
        const numOfCreds = await holder.getNumberOfCredentials();
        const numOfPendingCreds = await holder.getNumberOfPendingCredentials();
        expect(numOfCreds).toEqual(web3.toBigNumber(0));
        expect(numOfPendingCreds).toEqual(web3.toBigNumber(0));
    });
    it("should addTrustedIssuer and removeTrustedIssuer and check if issuer is trusted", async () => {
        const issuerAddress = issuer.issuer.address;
        await holder.addTrustedIssuer(issuerAddress);
        expect(await holder.isTrusted(issuerAddress)).toEqual(true);
        await holder.removeTrustedIssuer(issuerAddress);
        expect(await holder.isTrusted(issuerAddress)).toEqual(false);
    });
    it("should recompute proof of integrity hash", async () => {
        const credential: objHelpers.Credential = await issueTestCred();
        const integrityHash = await holder.recomputePOIHash(credential.txKey);
        expect(integrityHash).toBeDefined();
    });
    it("should get a credential", async () => {
        const credential: objHelpers.Credential = await issueTestCred();
        const expectedCredential = new objHelpers.Credential(issuer.issuer.address, badge.description, badge.name, badge.image, badge.version, web3.toBigNumber(0), holder.holder.address, credential.txKey, false);
        expect(credential).toEqual(expectedCredential);
    });
    it("should get all credentials", async () => {
        const badge1 = new issuerObjHelpers.IssuerBadge();
        const badge2 = new issuerObjHelpers.IssuerBadge();
        badge1.description = badge2.description = "Cool badge";
        badge1.name = "Nice";
        badge2.name = "Also Nice";
        badge1.image = badge2.image = "image";
        badge1.version = badge2.version = "1";

        await issuer.createBadge(badge1);
        await issuer.createBadge(badge2);
        await holder.addTrustedIssuer(issuer.issuer.address);
        const credential = new issuerObjHelpers.Credential(badge1.name, holder.holder.address, 0);
        const credential2 = new issuerObjHelpers.Credential(badge2.name, holder.holder.address, 0);
        await issuer.issueCredential(credential);
        await issuer.issueCredential(credential2);
        const key1 = await holder.getTxnKey(0);
        const key2 = await holder.getTxnKey(1);
        const expectedCredentials = await holder.getCredentials();
        expect(expectedCredentials.length).toBe(2);
    });
    it("should delete a credential", async () => {
        const credential: objHelpers.Credential = await issueTestCred();
        const key = await holder.getTxnKey(0);
        await holder.deleteCredential(key);
        const numOfPendingCreds = await holder.getNumberOfPendingCredentials();
        expect(numOfPendingCreds).toEqual(web3.toBigNumber(0));
    });
    it("should accept and reject a credential", async () => {
      const badge1 = new issuerObjHelpers.IssuerBadge();
      const badge2 = new issuerObjHelpers.IssuerBadge();
      badge1.description = badge2.description = "Cool badge";
      badge1.name = "Nice";
      badge2.name = "Also Nice";
      badge1.image = badge2.image = "image";
      badge1.version = badge2.version = "1";

      await issuer.createBadge(badge1);
      await issuer.createBadge(badge2);
      await holder.addTrustedIssuer(issuer.issuer.address);
      const credential = new issuerObjHelpers.Credential(badge1.name, holder.holder.address, 0);
      const credential2 = new issuerObjHelpers.Credential(badge2.name, holder.holder.address, 0);
      await issuer.issueCredential(credential);
      await issuer.issueCredential(credential2);
      const key1 = await holder.getTxnKey(0);
      const key2 = await holder.getTxnKey(1);
      await holder.acceptCredential(key1);
      await holder.rejectCredential(key2);
      const numOfPendingCreds = await holder.getNumberOfPendingCredentials();
      const numOfCredentials = await holder.getNumberOfCredentials();
      const expectedCredential = await holder.getCredential(key1);
      expect(numOfPendingCreds).toEqual(web3.toBigNumber(0));
      expect(numOfCredentials).toEqual(web3.toBigNumber(1));
      expect(expectedCredential.active).toBe(true);
    });
});
