import * as Web3 from 'web3';

const badgeForceToken = require('BadgeForceToken').badgeforcetoken;
const holderArtifacts = require('badgeforce').holder;
const issuerArtifacts = require('badgeforce').issuer;
const badgeLibrary = require('BadgeLibrary').badgeLibrary;
const badgeManager = require('badgeforce').badgeManager;
const authorizedIssuer = require('badgeforce').authorizedIssuer;
const transactionManager = require('badgeforce').transactionManager;
const issuerFactory = require('factories').issuerFactory;
const holderFactory = require('factories').holderFactory;
const verifier = require('badgeforce').verifier;
const contract = require('truffle-contract');

export const ganacheHost = 'http://127.0.0.1:8000';
const provider = new Web3.providers.HttpProvider(ganacheHost);
export const web3 = new Web3(provider);

const BadgeLibrary = contract(badgeLibrary);
BadgeLibrary.setProvider(provider);
BadgeLibrary.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});
BadgeLibrary.setNetwork(3000);

const Holder = contract(holderArtifacts);
Holder.setProvider(provider);
Holder.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});
Holder.setNetwork(3000);

const HolderFactory = contract(holderFactory);
HolderFactory.setProvider(provider);
HolderFactory.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});
HolderFactory.setNetwork(3000);

const IssuerFactory = contract(issuerFactory);
IssuerFactory.setProvider(provider);
IssuerFactory.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});
IssuerFactory.setNetwork(3000);

const Issuer = contract(issuerArtifacts);
Issuer.setProvider(provider);
Issuer.setNetwork(3000);
Issuer.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});

const BadgeManager = contract(badgeManager);
BadgeManager.setProvider(provider);
BadgeManager.setNetwork(3000);
BadgeManager.defaults({from: web3.eth.accounts[0]});

const AuthorizedIssuer = contract(authorizedIssuer);
AuthorizedIssuer.setProvider(provider);
AuthorizedIssuer.setNetwork(3000);
AuthorizedIssuer.defaults({from: web3.eth.accounts[0]});

const TransactionManager = contract(transactionManager);
TransactionManager.setProvider(provider);
TransactionManager.setNetwork(3000);
TransactionManager.defaults({from: web3.eth.accounts[0]});

const Verifier = contract(verifier);
Verifier.setProvider(provider);
Verifier.setNetwork(3000);
Verifier.defaults({from: web3.eth.accounts[0]});


const BadgeForceToken = contract(badgeForceToken);
BadgeForceToken.setProvider(provider);
BadgeForceToken.setNetwork(3000);
BadgeForceToken.defaults({
  from: web3.eth.accounts[0],
  gas: 9000000,

});

export const getTestAccounts = () => {
    return web3.eth.accounts;
};

const linkLibs = async () => {
    try {
        const blInstance = await BadgeLibrary.new();
        await Holder.link('BadgeLibrary', blInstance.address);
        // await BadgeManager.link("BadgeLibrary", blInstance.address);
        // await AuthorizedIssuer.link("BadgeLibrary", blInstance.address);
        // await TransactionManager.link("BadgeLibrary", blInstance.address);
        // await Verifier.link("BadgeLibrary", blInstance.address);
        // await Issuer.link("BadgeLibrary", blInstance.address);
    } catch (error) {
        console.error(error);
    }
};

export const getTestInstances = async (issuerParams) => {
    try {
        await linkLibs();
        const token = await BadgeForceToken.new();
        const issuer = await Issuer.new(issuerParams.adminWalletAddr, issuerParams.name, issuerParams.url, token.address);
        const holder = await Holder.new(web3.eth.accounts[0]);
        const holderF = await HolderFactory.new();
        const issuerF = await IssuerFactory.new();
        return {
          issuer,
          holder,
          token,
          holderF,
          issuerF,
        };
    } catch (error) {
        console.error(error);
    }
};
