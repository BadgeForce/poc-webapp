import {HolderClient, Holder} from "../../holder";
import {IssuerClient, Issuer} from "../index";
import * as objHelpers from "../obj_helpers";
import {ContractConfig} from "../../contract";
import {getTestAccounts, getTestInstances, web3, ganacheHost} from "../../../test-utils";
const holderArtifacts = require("badgeforce").holder;
const issuerArtifacts = require("badgeforce").issuer;

describe("Issuer api", () => {
    let holder: Holder;
    let issuer: Issuer;
    let accounts;
    let issuerParams;
    let testContractInstances;
    beforeAll(async () => {
        accounts = getTestAccounts();
    });
	beforeEach(async () => {
        issuerParams = {adminWalletAddr: accounts[0], name: "BadgeForce", url: "https://github.com/BadgeForce"};
        testContractInstances = await getTestInstances(issuerParams);

        const holderConfig = new ContractConfig(ganacheHost, holderArtifacts, 0, 7500000);
        const issuerConfig = new ContractConfig(ganacheHost, issuerArtifacts, 0, 4966224);
        const holderClient = new HolderClient(holderConfig);
        const issuerClient = new IssuerClient(issuerConfig);

        holder = await holderClient.getInstance(testContractInstances.holder.address);
        issuer = await issuerClient.getInstance(testContractInstances.issuer.address);
	})
	it("should get issuer info", async () => {
        const info = await issuer.getIssuerInfo();
        const expectedInfo = new objHelpers.IssuerInfo(accounts[0], issuer.issuer.address, issuerParams.name, issuerParams.url);
        expect(info).toEqual(expectedInfo);
    });
    it("should create a badge", async () => {
        const badge = new objHelpers.IssuerBadge("Cool badge", "Nice", "image", "1");
        await issuer.createBadge(badge);
        const count = await issuer.getNumberOfBadges();
        expect(count).toEqual(web3.toBigNumber(1));
    });
    it("should get a badge and delete a badge and get number of badges", async () => {
        const badge = new objHelpers.IssuerBadge();
        badge.description = "Cool badge";
        badge.name = "Nice";
        badge.image = "image";
        badge.version = "1";
        await issuer.createBadge(badge);
        const expectedBadge = await issuer.getBadge(0);
        badge.address = expectedBadge.address;
        expect(expectedBadge).toEqual(badge);
        await issuer.deleteBadge(expectedBadge.name);
        expect(await issuer.getNumberOfBadges()).toEqual(web3.toBigNumber(0));
    });
    it("should get all badges", async () => {
        const badge1 = new objHelpers.IssuerBadge();
        const badge2 = new objHelpers.IssuerBadge();
        badge1.description = badge2.description = "Cool badge";
        badge1.name = "Nice";
        badge2.name = "Also Nice";
        badge1.image = badge2.image = "image";
        badge1.version = badge2.version = "1";

        await issuer.createBadge(badge1);
        await issuer.createBadge(badge2);
        const expectedBadges = await issuer.getBadges();
        let expectedBadge1: objHelpers.IssuerBadge;
        let expectedBadge2: objHelpers.IssuerBadge;
        expectedBadges.forEach(badge => {
            if(badge.name === badge1.name) {
              expectedBadge1 = badge;
            } else {
              expectedBadge2 = badge;
            }
        });
        badge1.address = expectedBadge1.address;
        badge2.address = expectedBadge2.address;
        expect(badge1).toEqual(expectedBadge1);
        expect(badge2).toEqual(expectedBadge2);
    });
    it("should issue a credential", async () => {
        const badge = new objHelpers.IssuerBadge();
        badge.description = "Cool badge";
        badge.name = "Nice";
        badge.image = "image";
        badge.version = "1";
        await issuer.createBadge(badge);
        await holder.addTrustedIssuer(issuer.issuer.address);
        const credential = new objHelpers.Credential(badge.name, holder.holder.address, 0);
        await issuer.issueCredential(credential);
        expect(await holder.getNumberOfPendingCredentials()).toEqual(web3.toBigNumber("1"));
    });
    it("should authorize account, remove authorized account, and get number of authorized accounts", async () => {
        await issuer.authorzeAccount(accounts[1]);
        await issuer.authorzeAccount(accounts[2]);
        expect(await issuer.getNumberOfAuthorizedAccounts()).toEqual(web3.toBigNumber("2"));
        await issuer.removeAuthorizedAccount(0);
        const account = await issuer.getAuthorizedAccount(0);
        expect(account === accounts[2]).toBeFalsy()
    });
    it("should revoke, unrevoke and check if credential is revoked", async () => {
        const badge = new objHelpers.IssuerBadge();
        badge.description = "Cool badge";
        badge.name = "Nice";
        badge.image = "image";
        badge.version = "1";
        await issuer.createBadge(badge);
        await holder.addTrustedIssuer(issuer.issuer.address);
        const credential = new objHelpers.Credential(badge.name, holder.holder.address, 0);
        await issuer.issueCredential(credential);

        const key = await holder.getTxnKey(0);
        await issuer.revoke(key);
        expect(await issuer.isRevoked(key)).toBe(true);
        await issuer.unRevoke(key);
        expect(await issuer.isRevoked(key)).toBe(false);
    });
    it("should verify a credential", async () => {
        const badge = new objHelpers.IssuerBadge();
        badge.description = "Cool badge";
        badge.name = "Nice";
        badge.image = "image";
        badge.version = "1";
        await issuer.createBadge(badge);
        await holder.addTrustedIssuer(issuer.issuer.address);
        const credential = new objHelpers.Credential(badge.name, holder.holder.address, 0);
        await issuer.issueCredential(credential);

        const key = await holder.getTxnKey(0);
        let response = await issuer.verifyCredential(key, holder.holder.address);
        expect(response.verified).toBe(true);
        await issuer.revoke(key);
        response = await issuer.verifyCredential(key, holder.holder.address);
        expect(response.verified).toBe(false);
    });
});
