pragma solidity ^0.4.15;

import "badgeforce/contracts/Issuer.sol";


contract IssuerFactory {

    mapping(address => address[]) public created;
    mapping(address => bool) public isIssuerContract; //verify without having to do a bytecode check.
    bytes public issuerByteCode;

    function IssuerFactory() {
      //upon creation of the factory, deploy a HumanStandardToken (parameters are meaningless) and store the bytecode provably.
      //address verifiedIssuer = createIssuerContract(msg.sender, "BadgeForce Engineering", "https://github.com/badgeforce", BADGEFORCE_TOKEN);
      //issuerByteCode = codeAt(verifiedIssuer);
    }

    //verifies if a contract that has been deployed is a Human Standard Token.
    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas
    function verifyIssuerContract(address _tokenContract) constant returns (bool) {
      bytes memory fetchedIssuerByteCode = codeAt(_tokenContract);

      if (fetchedIssuerByteCode.length != issuerByteCode.length) {
        return false; //clear mismatch
      }

      //starting iterating through it if lengths match
      for (uint i = 0; i < fetchedIssuerByteCode.length; i ++) {
        if (fetchedIssuerByteCode[i] != issuerByteCode[i]) {
          return false;
        }
      }

      return true;
    }

    //for now, keeping this internal. Ideally there should also be a live version of this that any contract can use, lib-style.
    //retrieves the bytecode at a specific address.
    function codeAt(address _addr) internal constant returns (bytes o_code) {
      assembly {
          // retrieve the size of the code, this needs assembly
          let size := extcodesize(_addr)
          // allocate output byte array - this could also be done without assembly
          // by using o_code = new bytes(size)
          o_code := mload(0x40)
          // new "memory end" including padding
          mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
          // store length in memory
          mstore(o_code, size)
          // actually retrieve the code, this needs assembly
          extcodecopy(_addr, add(o_code, 0x20), 0, size)
      }
    }
    
    event NewIssuer(address _location);
    function createIssuerContract(address _admin, string _name, string _url, address _badgeForceToken) returns (address) {
        Issuer newIssuer = new Issuer(_admin, _name, _url, _badgeForceToken);
        created[msg.sender].push(address(newIssuer));
        isIssuerContract[address(newIssuer)] = true;
        NewIssuer(address(newIssuer));
        return address(newIssuer);
    }

    function getCreated(address _deployer) constant returns(address[] _contracts) {
        return created[_deployer];
    }
}