"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var issuer_1 = require("../../issuer");
var objHelpers = require("../obj_helpers");
var issuerObjHelpers = require("../../issuer/obj_helpers");
var contract_1 = require("../../contract");
var test_utils_1 = require("../../../test-utils");
var holderArtifacts = require("badgeforce").holder;
var issuerArtifacts = require("badgeforce").issuer;
describe("Holder api", function () {
    var holder;
    var issuer;
    var accounts;
    var issuerParams;
    var testContractInstances;
    var issueTestCred;
    var badge;
    beforeAll(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            accounts = test_utils_1.getTestAccounts();
            return [2 /*return*/];
        });
    }); });
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        var holderConfig, issuerConfig, holderClient, issuerClient;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    issuerParams = { adminWalletAddr: accounts[0], name: "BadgeForce", url: "https://github.com/BadgeForce" };
                    return [4 /*yield*/, test_utils_1.getTestInstances(issuerParams)];
                case 1:
                    testContractInstances = _a.sent();
                    holderConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, holderArtifacts, 0, 9000000);
                    issuerConfig = new contract_1.ContractConfig(test_utils_1.ganacheHost, issuerArtifacts, 0, 9000000);
                    holderClient = new index_1.HolderClient(holderConfig);
                    issuerClient = new issuer_1.IssuerClient(issuerConfig);
                    return [4 /*yield*/, holderClient.getInstance(testContractInstances.holder.address)];
                case 2:
                    holder = _a.sent();
                    return [4 /*yield*/, issuerClient.getInstance(testContractInstances.issuer.address)];
                case 3:
                    issuer = _a.sent();
                    badge = new issuerObjHelpers.IssuerBadge();
                    badge.description = "Cool badge";
                    badge.name = "Nice";
                    badge.image = "image";
                    badge.version = "1";
                    issueTestCred = function () { return __awaiter(_this, void 0, void 0, function () {
                        var credential, _a, _b, error_1;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _c.trys.push([0, 5, , 6]);
                                    return [4 /*yield*/, issuer.createBadge(badge)];
                                case 1:
                                    _c.sent();
                                    return [4 /*yield*/, holder.addTrustedIssuer(issuer.issuer.address)];
                                case 2:
                                    _c.sent();
                                    credential = new issuerObjHelpers.Credential(badge.name, holder.holder.address, 0);
                                    return [4 /*yield*/, issuer.issueCredential(credential)];
                                case 3:
                                    _c.sent();
                                    _b = (_a = holder).getCredential;
                                    return [4 /*yield*/, holder.getTxnKey(0)];
                                case 4: return [2 /*return*/, (_b.apply(_a, [_c.sent()]))];
                                case 5:
                                    error_1 = _c.sent();
                                    throw new Error(error_1);
                                case 6: return [2 /*return*/];
                            }
                        });
                    }); };
                    return [2 /*return*/];
            }
        });
    }); });
    it("should get holder info", function () { return __awaiter(_this, void 0, void 0, function () {
        var info;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, holder.getHolderInfo()];
                case 1:
                    info = _a.sent();
                    expect(info).toEqual(new objHelpers.HolderInfo(accounts[0]));
                    return [2 /*return*/];
            }
        });
    }); });
    it("should getNumberOfCredentials and  getNumberOfPendingCredentials", function () { return __awaiter(_this, void 0, void 0, function () {
        var numOfCreds, numOfPendingCreds;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, holder.getNumberOfCredentials()];
                case 1:
                    numOfCreds = _a.sent();
                    return [4 /*yield*/, holder.getNumberOfPendingCredentials()];
                case 2:
                    numOfPendingCreds = _a.sent();
                    expect(numOfCreds).toEqual(test_utils_1.web3.toBigNumber(0));
                    expect(numOfPendingCreds).toEqual(test_utils_1.web3.toBigNumber(0));
                    return [2 /*return*/];
            }
        });
    }); });
    it("should addTrustedIssuer and removeTrustedIssuer and check if issuer is trusted", function () { return __awaiter(_this, void 0, void 0, function () {
        var issuerAddress, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    issuerAddress = issuer.issuer.address;
                    return [4 /*yield*/, holder.addTrustedIssuer(issuerAddress)];
                case 1:
                    _c.sent();
                    _a = expect;
                    return [4 /*yield*/, holder.isTrusted(issuerAddress)];
                case 2:
                    _a.apply(void 0, [_c.sent()]).toEqual(true);
                    return [4 /*yield*/, holder.removeTrustedIssuer(issuerAddress)];
                case 3:
                    _c.sent();
                    _b = expect;
                    return [4 /*yield*/, holder.isTrusted(issuerAddress)];
                case 4:
                    _b.apply(void 0, [_c.sent()]).toEqual(false);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should recompute proof of integrity hash", function () { return __awaiter(_this, void 0, void 0, function () {
        var credential, integrityHash;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, issueTestCred()];
                case 1:
                    credential = _a.sent();
                    return [4 /*yield*/, holder.recomputePOIHash(credential.txKey)];
                case 2:
                    integrityHash = _a.sent();
                    expect(integrityHash).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should get a credential", function () { return __awaiter(_this, void 0, void 0, function () {
        var credential, expectedCredential;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, issueTestCred()];
                case 1:
                    credential = _a.sent();
                    expectedCredential = new objHelpers.Credential(issuer.issuer.address, badge.description, badge.name, badge.image, badge.version, test_utils_1.web3.toBigNumber(0), holder.holder.address, credential.txKey, false);
                    expect(credential).toEqual(expectedCredential);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should get all credentials", function () { return __awaiter(_this, void 0, void 0, function () {
        var badge1, badge2, credential, credential2, key1, key2, expectedCredentials;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    badge1 = new issuerObjHelpers.IssuerBadge();
                    badge2 = new issuerObjHelpers.IssuerBadge();
                    badge1.description = badge2.description = "Cool badge";
                    badge1.name = "Nice";
                    badge2.name = "Also Nice";
                    badge1.image = badge2.image = "image";
                    badge1.version = badge2.version = "1";
                    return [4 /*yield*/, issuer.createBadge(badge1)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, issuer.createBadge(badge2)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, holder.addTrustedIssuer(issuer.issuer.address)];
                case 3:
                    _a.sent();
                    credential = new issuerObjHelpers.Credential(badge1.name, holder.holder.address, 0);
                    credential2 = new issuerObjHelpers.Credential(badge2.name, holder.holder.address, 0);
                    return [4 /*yield*/, issuer.issueCredential(credential)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, issuer.issueCredential(credential2)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, holder.getTxnKey(0)];
                case 6:
                    key1 = _a.sent();
                    return [4 /*yield*/, holder.getTxnKey(1)];
                case 7:
                    key2 = _a.sent();
                    return [4 /*yield*/, holder.getCredentials()];
                case 8:
                    expectedCredentials = _a.sent();
                    expect(expectedCredentials.length).toBe(2);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should delete a credential", function () { return __awaiter(_this, void 0, void 0, function () {
        var credential, key, numOfPendingCreds;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, issueTestCred()];
                case 1:
                    credential = _a.sent();
                    return [4 /*yield*/, holder.getTxnKey(0)];
                case 2:
                    key = _a.sent();
                    return [4 /*yield*/, holder.deleteCredential(key)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, holder.getNumberOfPendingCredentials()];
                case 4:
                    numOfPendingCreds = _a.sent();
                    expect(numOfPendingCreds).toEqual(test_utils_1.web3.toBigNumber(0));
                    return [2 /*return*/];
            }
        });
    }); });
    it("should accept and reject a credential", function () { return __awaiter(_this, void 0, void 0, function () {
        var badge1, badge2, credential, credential2, key1, key2, numOfPendingCreds, numOfCredentials, expectedCredential;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    badge1 = new issuerObjHelpers.IssuerBadge();
                    badge2 = new issuerObjHelpers.IssuerBadge();
                    badge1.description = badge2.description = "Cool badge";
                    badge1.name = "Nice";
                    badge2.name = "Also Nice";
                    badge1.image = badge2.image = "image";
                    badge1.version = badge2.version = "1";
                    return [4 /*yield*/, issuer.createBadge(badge1)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, issuer.createBadge(badge2)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, holder.addTrustedIssuer(issuer.issuer.address)];
                case 3:
                    _a.sent();
                    credential = new issuerObjHelpers.Credential(badge1.name, holder.holder.address, 0);
                    credential2 = new issuerObjHelpers.Credential(badge2.name, holder.holder.address, 0);
                    return [4 /*yield*/, issuer.issueCredential(credential)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, issuer.issueCredential(credential2)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, holder.getTxnKey(0)];
                case 6:
                    key1 = _a.sent();
                    return [4 /*yield*/, holder.getTxnKey(1)];
                case 7:
                    key2 = _a.sent();
                    return [4 /*yield*/, holder.acceptCredential(key1)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, holder.rejectCredential(key2)];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, holder.getNumberOfPendingCredentials()];
                case 10:
                    numOfPendingCreds = _a.sent();
                    return [4 /*yield*/, holder.getNumberOfCredentials()];
                case 11:
                    numOfCredentials = _a.sent();
                    return [4 /*yield*/, holder.getCredential(key1)];
                case 12:
                    expectedCredential = _a.sent();
                    expect(numOfPendingCreds).toEqual(test_utils_1.web3.toBigNumber(0));
                    expect(numOfCredentials).toEqual(test_utils_1.web3.toBigNumber(1));
                    expect(expectedCredential.active).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=api.holder.spec.js.map