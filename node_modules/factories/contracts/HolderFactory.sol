pragma solidity ^0.4.15;

import "badgeforce/contracts/Holder.sol";


contract HolderFactory {

    mapping(address => address[]) public created;
    mapping(address => bool) public isHolderContract; //verify without having to do a bytecode check.
    bytes public HolderByteCode;

    function HolderFactory() {
      //upon creation of the factory, deploy a HumanStandardToken (parameters are meaningless) and store the bytecode provably.
      //address verifiedHolder = createHolderContract(0x94e291182fa824d6d38d8f5bb8d44ebe90aab7c1);
      //HolderByteCode = codeAt(verifiedHolder);
    }

    //verifies if a contract that has been deployed is a Human Standard Token.
    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas
    function verifyHolderContract(address _holderContract) constant returns (bool) {
      bytes memory fetchedHolderByteCode = codeAt(_holderContract);

      if (fetchedHolderByteCode.length != HolderByteCode.length) {
        return false; //clear mismatch
      }

      //starting iterating through it if lengths match
      for (uint i = 0; i < fetchedHolderByteCode.length; i ++) {
        if (fetchedHolderByteCode[i] != HolderByteCode[i]) {
          return false;
        }
      }

      return true;
    }

    //for now, keeping this internal. Ideally there should also be a live version of this that any contract can use, lib-style.
    //retrieves the bytecode at a specific address.
    function codeAt(address _addr) internal constant returns (bytes o_code) {
      assembly {
          // retrieve the size of the code, this needs assembly
          let size := extcodesize(_addr)
          // allocate output byte array - this could also be done without assembly
          // by using o_code = new bytes(size)
          o_code := mload(0x40)
          // new "memory end" including padding
          mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))
          // store length in memory
          mstore(o_code, size)
          // actually retrieve the code, this needs assembly
          extcodecopy(_addr, add(o_code, 0x20), 0, size)
      }
    }

    event NewHolder(address _location);
    function createHolderContract(address _holder) returns (address _newHolder) {
        Holder newHolder = (new Holder(_holder));
        created[msg.sender].push(address(newHolder));
        isHolderContract[address(newHolder)] = true;
        NewHolder(address(newHolder));
        return address(newHolder);
    }

    function getCreated(address _deployer) constant returns(address[] _contracts) {
        return created[_deployer];
    }
}