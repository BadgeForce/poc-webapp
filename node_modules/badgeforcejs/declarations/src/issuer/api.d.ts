import { Contract, ContractConfig } from '../contract';
import { IssuerInfo, IssuerBadge, Credential, VerifyResponse } from './obj_helpers';
export declare class Issuer {
    issuer: any;
    /**
     * @param issuer instance from truffle-contract
     */
    constructor(issuer: any);
    /**
     * Gets the public information for this issuer contract
     * @return info object
     */
    getIssuerInfo(): Promise<IssuerInfo>;
    /**
     * Gets a badge by index (index of the badge name on the contract)
     * @param  i [description]
     * @return   badge object
     */
    getBadge(i: any): Promise<IssuerBadge>;
    /**
     * Gets all the badges
     * @return array of badges
     */
    getBadges(): Promise<IssuerBadge[]>;
    /**
     * Creates a new badge for issuance
     * @param  badge badge object
     */
    createBadge(badge: IssuerBadge): Promise<any>;
    /**
     * Deletes a badge by name
     * @param  name name of the badge to be deleted
     */
    deleteBadge(name: string): Promise<any>;
    /**
     * Issues a credential
     * @param  credential credential object
     */
    issueCredential(credential: Credential): Promise<any>;
    /**
     * Gets current number of badges on the contract
     * @return number of badges
     */
    getNumberOfBadges(): Promise<any>;
    /**
     * Authorizes a new ethereum wallet address. This will allow an address to do things.
     * @param  newIssuer wallet address
     */
    authorzeAccount(newIssuer: any): Promise<any>;
    /**
     * Removes an authorized address. Once this is done, the removed address will no longer be able to interact with the contract
     * @param  issuer wallet address
     */
    removeAuthorizedAccount(issuer: any): Promise<any>;
    /**
     * Gets an authorized account (wallet address) by index
     * @param  index wallet address
     * @return       address of the authorized account
     */
    getAuthorizedAccount(index: any): Promise<any>;
    /**
     * Gets the current number of authorized accounts on the contract
     * @return number of authorized accounts
     */
    getNumberOfAuthorizedAccounts(): Promise<any>;
    /**
     * Revoke a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    revoke(txnKey: any): Promise<any>;
    /**
     * Un-Revoke a credential by transaction key
     * @param  txnKey transaction key of the credential
     */
    unRevoke(txnKey: any): Promise<any>;
    /**
     * Checks if a credential is revoked by transaction key
     * @param  txnKey transaction key of the credential
     * @return true/false
     */
    isRevoked(txnKey: any): Promise<any>;
    /**
     * Verifies a credential
     * @param  txnKey    transaction key of the credential
     * @param  recipient recipient of the credential (holder contract address)
     * @return           verification response
     */
    verifyCredential(txnKey: any, recipient: any): Promise<VerifyResponse>;
}
export declare class IssuerClient extends Contract {
    /**
     * @param config a configuration object
     */
    constructor(config: ContractConfig);
    /**
     * Gets a [[Issuer]] object instanstiated with contract data at the given address
     * @param  address address of the contract
     * @return         a issuer object
     */
    getInstance(address: number): Promise<Issuer>;
}
