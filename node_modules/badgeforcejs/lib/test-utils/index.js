"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var Web3 = require("web3");
var badgeForceToken = require('BadgeForceToken').badgeforcetoken;
var holderArtifacts = require('badgeforce').holder;
var issuerArtifacts = require('badgeforce').issuer;
var badgeLibrary = require('BadgeLibrary').badgeLibrary;
var badgeManager = require('badgeforce').badgeManager;
var authorizedIssuer = require('badgeforce').authorizedIssuer;
var transactionManager = require('badgeforce').transactionManager;
var issuerFactory = require('factories').issuerFactory;
var holderFactory = require('factories').holderFactory;
var verifier = require('badgeforce').verifier;
var contract = require('truffle-contract');
exports.ganacheHost = 'http://127.0.0.1:8000';
var provider = new Web3.providers.HttpProvider(exports.ganacheHost);
exports.web3 = new Web3(provider);
var BadgeLibrary = contract(badgeLibrary);
BadgeLibrary.setProvider(provider);
BadgeLibrary.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
BadgeLibrary.setNetwork(3000);
var Holder = contract(holderArtifacts);
Holder.setProvider(provider);
Holder.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
Holder.setNetwork(3000);
var HolderFactory = contract(holderFactory);
HolderFactory.setProvider(provider);
HolderFactory.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
HolderFactory.setNetwork(3000);
var IssuerFactory = contract(issuerFactory);
IssuerFactory.setProvider(provider);
IssuerFactory.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
IssuerFactory.setNetwork(3000);
var Issuer = contract(issuerArtifacts);
Issuer.setProvider(provider);
Issuer.setNetwork(3000);
Issuer.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
var BadgeManager = contract(badgeManager);
BadgeManager.setProvider(provider);
BadgeManager.setNetwork(3000);
BadgeManager.defaults({ from: exports.web3.eth.accounts[0] });
var AuthorizedIssuer = contract(authorizedIssuer);
AuthorizedIssuer.setProvider(provider);
AuthorizedIssuer.setNetwork(3000);
AuthorizedIssuer.defaults({ from: exports.web3.eth.accounts[0] });
var TransactionManager = contract(transactionManager);
TransactionManager.setProvider(provider);
TransactionManager.setNetwork(3000);
TransactionManager.defaults({ from: exports.web3.eth.accounts[0] });
var Verifier = contract(verifier);
Verifier.setProvider(provider);
Verifier.setNetwork(3000);
Verifier.defaults({ from: exports.web3.eth.accounts[0] });
var BadgeForceToken = contract(badgeForceToken);
BadgeForceToken.setProvider(provider);
BadgeForceToken.setNetwork(3000);
BadgeForceToken.defaults({
    from: exports.web3.eth.accounts[0],
    gas: 9000000,
});
exports.getTestAccounts = function () {
    return exports.web3.eth.accounts;
};
var linkLibs = function () { return __awaiter(_this, void 0, void 0, function () {
    var blInstance, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4 /*yield*/, BadgeLibrary.new()];
            case 1:
                blInstance = _a.sent();
                return [4 /*yield*/, Holder.link('BadgeLibrary', blInstance.address)];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                error_1 = _a.sent();
                console.error(error_1);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.getTestInstances = function (issuerParams) { return __awaiter(_this, void 0, void 0, function () {
    var token, issuer, holder, holderF, issuerF, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 7, , 8]);
                return [4 /*yield*/, linkLibs()];
            case 1:
                _a.sent();
                return [4 /*yield*/, BadgeForceToken.new()];
            case 2:
                token = _a.sent();
                return [4 /*yield*/, Issuer.new(issuerParams.adminWalletAddr, issuerParams.name, issuerParams.url, token.address)];
            case 3:
                issuer = _a.sent();
                return [4 /*yield*/, Holder.new(exports.web3.eth.accounts[0])];
            case 4:
                holder = _a.sent();
                return [4 /*yield*/, HolderFactory.new()];
            case 5:
                holderF = _a.sent();
                return [4 /*yield*/, IssuerFactory.new()];
            case 6:
                issuerF = _a.sent();
                return [2 /*return*/, {
                        issuer: issuer,
                        holder: holder,
                        token: token,
                        holderF: holderF,
                        issuerF: issuerF,
                    }];
            case 7:
                error_2 = _a.sent();
                console.error(error_2);
                return [3 /*break*/, 8];
            case 8: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=index.js.map